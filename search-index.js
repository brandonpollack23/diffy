var searchIndex = JSON.parse('{\
"diffy":{"doc":"Tools for finding and manipulating differences between …","t":[3,4,13,13,13,3,3,3,13,4,13,3,3,3,3,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["ApplyError","ConflictStyle","Context","Delete","Diff3","DiffOptions","Hunk","HunkRange","Insert","Line","Merge","MergeOptions","ParsePatchError","Patch","PatchFormatter","apply","apply_bytes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","create_patch","create_patch","create_patch_bytes","create_patch_bytes","default","default","default","end","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_patch","from","from","from","from","from","from","from","from","from","from","from_bytes","from_str","function_context","hunks","into","into","into","into","into","into","into","into","into","into","is_empty","len","lines","merge","merge","merge_bytes","merge_bytes","modified","ne","ne","ne","ne","new","new","new","new_range","old_range","original","range","set_conflict_marker_length","set_conflict_style","set_context_len","start","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_color","write_patch_into","0","0","0"],"q":["diffy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","diffy::Line","",""],"d":["An error returned when <code>apply</code>ing a <code>Patch</code> fails","Style used when rendering a conflict","A line providing context in the diff which is present in …","A line deleted from the old file","Renders conflicting lines from both files including lines …","A collection of options for modifying the way a diff is …","Represents a group of differing lines between two files","The range of lines in a file for a particular <code>Hunk</code>.","A line inserted to the new file","A line in either the old file, new file, or both.","Renders conflicting lines from both files, separated by …","A collection of options for modifying the way a merge is …","An error returned when parsing a <code>Patch</code> using …","Representation of all the differences between two files","Struct used to adjust the formatting of a <code>Patch</code>","Apply a <code>Patch</code> to a base image","Apply a non-utf8 <code>Patch</code> to a base image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a patch between two texts.","Produce a Patch between two texts based on the configured …","Create a patch between two potentially non-utf8 texts","Create a patch between two potentially non-utf8 texts","","","","Returns the ending line number of the range (exclusive)","","","","","","","","","","","","","","","","","","","Returns a <code>Display</code> impl which can be used to print a Patch","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parse a <code>Patch</code> from bytes","Parse a <code>Patch</code> from a string","Returns the function context (if any) for the hunk","Returns the hunks in the patch","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the range is empty (has a length of <code>0</code>)","Returns the number of lines in the range","Returns the lines in the hunk","Merge two files given a common ancestor.","Merge two files, given a common ancestor, based on the …","Perform a 3-way merge between potentially non-utf8 texts","Perform a 3-way merge between potentially non-utf8 texts","Return the name of the new file","","","","","Construct a new <code>DiffOptions</code> with default settings","Constructs a new <code>MergeOptions</code> with default settings","Construct a new formatter","Returns the corresponding range for the new file in the …","Returns the corresponding range for the old file in the …","Return the name of the old file","Returns the range as a <code>ops::Range</code>","Set the length of the conflict markers used when …","Set the conflict style used when displaying a merge …","Set the number of context lines that should be used when …","Returns the starting line number of the range (inclusive)","Convert a <code>Patch</code> into bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable formatting a patch with color","","","",""],"i":[0,0,1,1,2,0,0,0,1,0,2,0,0,0,0,0,0,3,4,2,5,6,7,8,9,10,1,3,4,2,5,6,7,8,9,10,1,2,8,9,10,1,2,8,9,10,1,0,4,0,4,4,5,6,10,8,9,10,1,3,3,4,2,5,6,7,7,8,8,9,10,10,1,6,3,4,2,5,6,7,8,9,10,1,8,8,9,8,3,4,2,5,6,7,8,9,10,1,10,10,9,0,5,0,5,8,8,9,10,1,4,5,6,9,9,8,10,5,5,4,10,8,2,8,9,10,1,3,7,8,10,3,4,2,5,6,7,8,9,10,1,3,4,2,5,6,7,8,9,10,1,3,4,2,5,6,7,8,9,10,1,6,6,11,12,13],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",0],["patch",3]],["result",4,[["string",3],["applyerror",3]]]],[[["patch",3]],["result",4,[["vec",3,[["u8",0]]],["applyerror",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["conflictstyle",4]],["conflictstyle",4]],[[["patch",3,[["",26,[["toowned",8],["sized",8]]]]]],["patch",3,[["",26,[["toowned",8],["sized",8]]]]]],[[["hunk",3,[["sized",8]]]],["hunk",3,[["sized",8]]]],[[["hunkrange",3]],["hunkrange",3]],[[["line",4,[["sized",8]]]],["line",4,[["sized",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["str",0],["str",0]],["patch",3,[["str",0]]]],[[["diffoptions",3],["str",0],["str",0]],["patch",3,[["str",0]]]],[[],["patch",3]],[[["diffoptions",3]],["patch",3]],[[],["diffoptions",3]],[[],["mergeoptions",3]],[[],["patchformatter",3]],[[["hunkrange",3]],["usize",0]],[[["patch",3,[["",26,[["partialeq",8],["toowned",8],["sized",8]]]]],["patch",3]],["bool",0]],[[["hunk",3,[["",26,[["partialeq",8],["sized",8]]]]],["hunk",3]],["bool",0]],[[["hunkrange",3],["hunkrange",3]],["bool",0]],[[["line",4,[["",26,[["partialeq",8],["sized",8]]]]],["line",4]],["bool",0]],[[["applyerror",3],["formatter",3]],["result",6]],[[["applyerror",3],["formatter",3]],["result",6]],[[["diffoptions",3],["formatter",3]],["result",6]],[[["conflictstyle",4],["formatter",3]],["result",6]],[[["mergeoptions",3],["formatter",3]],["result",6]],[[["patchformatter",3],["formatter",3]],["result",6]],[[["parsepatcherror",3],["formatter",3]],["result",6]],[[["parsepatcherror",3],["formatter",3]],["result",6]],[[["patch",3,[["str",0]]],["formatter",3]],["result",6]],[[["patch",3,[["sized",8]]],["formatter",3]],["result",6]],[[["hunk",3,[["",26,[["debug",8],["sized",8]]]]],["formatter",3]],["result",6]],[[["hunkrange",3],["formatter",3]],["result",6]],[[["hunkrange",3],["formatter",3]],["result",6]],[[["line",4,[["",26,[["debug",8],["sized",8]]]]],["formatter",3]],["result",6]],[[["patchformatter",3],["patch",3]],["display",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["patch",3],["parsepatcherror",3]]]],[[["str",0]],["result",4,[["patch",3,[["str",0]]],["parsepatcherror",3]]]],[[["hunk",3,[["sized",8]]]],["option",4]],[[["patch",3,[["",26,[["toowned",8],["sized",8]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["hunkrange",3]],["bool",0]],[[["hunkrange",3]],["usize",0]],[[["hunk",3,[["sized",8]]]]],[[["str",0],["str",0],["str",0]],["result",4,[["string",3],["string",3]]]],[[["mergeoptions",3],["str",0],["str",0],["str",0]],["result",4,[["string",3],["string",3]]]],[[],["result",4,[["vec",3,[["u8",0]]],["vec",3,[["u8",0]]]]]],[[["mergeoptions",3]],["result",4,[["vec",3,[["u8",0]]],["vec",3,[["u8",0]]]]]],[[["patch",3,[["",26,[["toowned",8],["sized",8]]]]]],["option",4]],[[["patch",3,[["",26,[["partialeq",8],["toowned",8],["sized",8]]]]],["patch",3]],["bool",0]],[[["hunk",3,[["",26,[["partialeq",8],["sized",8]]]]],["hunk",3]],["bool",0]],[[["hunkrange",3],["hunkrange",3]],["bool",0]],[[["line",4,[["",26,[["partialeq",8],["sized",8]]]]],["line",4]],["bool",0]],[[],["diffoptions",3]],[[],["mergeoptions",3]],[[],["patchformatter",3]],[[["hunk",3,[["sized",8]]]],["hunkrange",3]],[[["hunk",3,[["sized",8]]]],["hunkrange",3]],[[["patch",3,[["",26,[["toowned",8],["sized",8]]]]]],["option",4]],[[["hunkrange",3]],["range",3,[["usize",0]]]],[[["mergeoptions",3],["usize",0]],["mergeoptions",3]],[[["mergeoptions",3],["conflictstyle",4]],["mergeoptions",3]],[[["diffoptions",3],["usize",0]],["diffoptions",3]],[[["hunkrange",3]],["usize",0]],[[["patch",3,[["",26,[["asref",8],["toowned",8],["sized",8]]]]]],["vec",3,[["u8",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["patchformatter",3]],["patchformatter",3]],[[["patchformatter",3],["patch",3],["write",8]],["result",6]],null,null,null],"p":[[4,"Line"],[4,"ConflictStyle"],[3,"ApplyError"],[3,"DiffOptions"],[3,"MergeOptions"],[3,"PatchFormatter"],[3,"ParsePatchError"],[3,"Patch"],[3,"Hunk"],[3,"HunkRange"],[13,"Context"],[13,"Delete"],[13,"Insert"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
